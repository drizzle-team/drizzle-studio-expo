{"version":3,"file":"useDrizzleStudio.js","sourceRoot":"","sources":["../src/useDrizzleStudio.tsx"],"names":[],"mappings":"AAEA,OAAO,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAMlC,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAC,KAAY;IACjD,MAAM,MAAM,GAAG,uBAAuB,CAAC,4BAA4B,CAAC,CAAC;IAErE,MAAM,YAAY,GAAG,KAAK,EAAE,CAK3B,EAAE,EAAE;QACD,IAAI,CAAC,KAAK,CAAC,EAAE;YAAE,OAAO;QACtB,IAAI,IAAI,GAAU,EAAE,CAAC;QAErB,IAAI,CAAC;YACD,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;gBAC1B,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACrD,IAAI,QAAQ,CAAC;gBACb,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;oBACd,QAAQ,GAAG,MAAM,SAAS,CAAC,wBAAwB,CAC/C,CAAC,CAAC,MAAM,CACX,CAAC;gBACN,CAAC;qBAAM,CAAC;oBACJ,QAAQ,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBACtD,CAAC;gBAED,IAAI,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YACxC,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;oBACd,IAAI,GAAG,MAAM,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBACtD,CAAC;qBAAM,CAAC;oBACJ,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;oBACzD,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;gBACzB,CAAC;YACL,CAAC;YAED,MAAM,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACvE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACL,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACX,MAAM,aAAa,GAAU,EAAE,CAAC;QAEhC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;QAExE,OAAO,GAAG,EAAE;YACR,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;gBACvC,YAAY,EAAE,MAAM,EAAE,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACjB,CAAC","sourcesContent":["import * as opSQLite from \"@op-engineering/op-sqlite\";\nimport * as SQLite from \"expo-sqlite\";\nimport { useDevToolsPluginClient } from \"expo/devtools\";\nimport { useEffect } from \"react\";\n\ntype Props =\n    | { driver: \"expo\"; db: SQLite.SQLiteDatabase | null }\n    | { driver: \"opsqlite\"; db: opSQLite.DB | null };\n\nexport default function useDrizzleStudio(props: Props) {\n    const client = useDevToolsPluginClient(\"expo-drizzle-studio-plugin\");\n\n    const transferData = async (e: {\n        sql: string;\n        params: (string | number)[];\n        arrayMode: boolean;\n        id: string;\n    }) => {\n        if (!props.db) return;\n        let data: any[] = [];\n\n        try {\n            if (props.driver === \"expo\") {\n                const statement = await props.db.prepareAsync(e.sql);\n                let executed;\n                if (e.arrayMode) {\n                    executed = await statement.executeForRawResultAsync(\n                        e.params,\n                    );\n                } else {\n                    executed = await statement.executeAsync(e.params);\n                }\n\n                data = await executed.getAllAsync();\n            } else {\n                if (e.arrayMode) {\n                    data = await props.db.executeRaw(e.sql, e.params);\n                } else {\n                    const executed = await props.db.execute(e.sql, e.params);\n                    data = executed.rows;\n                }\n            }\n\n            client?.sendMessage(`transferData-${e.id}`, { from: \"app\", data });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(() => {\n        const subscriptions: any[] = [];\n\n        subscriptions.push(client?.addMessageListener(\"getData\", transferData));\n\n        return () => {\n            for (const subscription of subscriptions) {\n                subscription?.remove();\n            }\n        };\n    }, [client]);\n}\n"]}