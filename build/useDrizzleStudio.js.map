{"version":3,"file":"useDrizzleStudio.js","sourceRoot":"","sources":["../src/useDrizzleStudio.tsx"],"names":[],"mappings":"AACA,OAAO,EAA2C,uBAAuB,EAAE,MAAM,eAAe,CAAC;AACjG,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,MAAM,UAAU,gBAAgB,CAAC,EAAgC;IAC/D,MAAM,MAAM,GAAG,uBAAuB,CAAC,4BAA4B,CAAC,CAAC;IAErE,MAAM,OAAO,GACX,CAAC,EAAyB,EAAE,MAA4B,EAAE,EAAE,CAC5D,KAAK,EAAE,CAAqF,EAAE,EAAE;QAC9F,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,QAAkD,CAAC;YACvD,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;gBAChB,QAAQ,GAAG,MAAM,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;YACtE,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;YAC1D,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAChE,CAAC;IACH,CAAC,CAAC;IAEJ,MAAM,aAAa,GACjB,CAAC,EAAyB,EAAE,MAA4B,EAAE,EAAE,CAC5D,KAAK,EAAE,CAAgF,EAAE,EAAE;QACzF,MAAM,OAAO,GAAU,EAAE,CAAC;QAC1B,IAAI,CAAC;YACH,MAAM,EAAE,CAAC,oBAAoB,CAAC,KAAK,IAAI,EAAE;gBACvC,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;oBAC9B,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;oBAC7D,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;oBAC5C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC;IAEJ,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QAED,MAAM,aAAa,GAAwB,EAAE,CAAC;QAE9C,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5E,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAExF,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;gBACzC,YAAY,CAAC,MAAM,EAAE,CAAC;YACxB,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AACnB,CAAC","sourcesContent":["import * as SQLite from 'expo-sqlite';\nimport { DevToolsPluginClient, EventSubscription, useDevToolsPluginClient } from 'expo/devtools';\nimport { useEffect } from 'react';\n\nexport function useDrizzleStudio(db: SQLite.SQLiteDatabase | null) {\n  const client = useDevToolsPluginClient('expo-drizzle-studio-plugin');\n\n  const queryFn =\n    (db: SQLite.SQLiteDatabase, client: DevToolsPluginClient) =>\n    async (e: { sql: string; params?: SQLite.SQLiteBindValue[]; arrayMode: boolean; id: string }) => {\n      try {\n        const statement = await db.prepareAsync(e.sql);\n        let executed: SQLite.SQLiteExecuteAsyncResult<unknown>;\n        if (e.arrayMode) {\n          executed = await statement.executeForRawResultAsync(e.params || []);\n        } else {\n          executed = await statement.executeAsync(e.params || []);\n        }\n        const data = await executed.getAllAsync();\n        client.sendMessage(`query-${e.id}`, data);\n      } catch (error) {\n        client.sendMessage(`query-${e.id}`, { error: error.message });\n      }\n    };\n\n  const transactionFn =\n    (db: SQLite.SQLiteDatabase, client: DevToolsPluginClient) =>\n    async (e: { queries: { sql: string; params?: SQLite.SQLiteBindValue[] }[]; id: string }) => {\n      const results: any[] = [];\n      try {\n        await db.withTransactionAsync(async () => {\n          for (const query of e.queries) {\n            const stmt = await db.prepareAsync(query.sql);\n            const executed = await stmt.executeAsync(query.params || []);\n            const result = await executed.getAllAsync();\n            results.push(result);\n          }\n        });\n      } catch (error) {\n        results.push({ error: error.message });\n      }\n      client.sendMessage(`transaction-${e.id}`, results);\n    };\n\n  useEffect(() => {\n    if (!client || !db) {\n      return;\n    }\n\n    const subscriptions: EventSubscription[] = [];\n\n    subscriptions.push(client.addMessageListener('query', queryFn(db, client)));\n    subscriptions.push(client.addMessageListener('transaction', transactionFn(db, client)));\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription.remove();\n      }\n    };\n  }, [client, db]);\n}\n"]}